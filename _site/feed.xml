<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Waiting for User Input</title>
				<description>&lt;p&gt;I love it when things are crazy simple and this is something I want to remember.&lt;/p&gt;

&lt;p&gt;My current project has a form that can be filtered with user input via a textbox.  Pretty simple AJAX stuff, nothing too fancy.  Another developer outside the team even coded it for us so hurray for freebies.  He even went as far as implementing a pretty simple system to keep the input from overloading the server with search queries.&lt;/p&gt;

&lt;p&gt;The problem is, it wasn’t quite enough.  We noticed that just simply typing two or three characters resulted in a minimum of two queries sent to the server.  That’s nothing too worrying, however, one of my designers was trying to implement animations on the search results to help the user understand that something is happening while they’re typing and multiple searches were killing the animation’s ability to keep up.  This resulted in a “janky” animation.&lt;/p&gt;

&lt;p&gt;We decided to implement this code in order to make the search wait until the user stops typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var keywait;
$scope.searchChanged = function () {
	clearTimeout(keywait);
	keywait = setTimeout(function () {
		if ($scope.querying) {
			$scope.queryOnReturn = true;
			return;
		}

		getActivities();
	}, 240);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The relevant bits here are the clearTimeout call and the setTimeout call.  The 240 millisecond timeout is completely based on how fast I type.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
				<pubDate>Mon, 22 Sep 2014 21:54:01 -0400</pubDate>
				<link>/2014/09/22/waiting-for-user-input.html</link>
				<guid isPermaLink="true">/2014/09/22/waiting-for-user-input.html</guid>
			</item>
		
			<item>
				<title>Blogtopics</title>
				<description>&lt;ul&gt;
  &lt;li&gt;Impact of page speed on business&lt;/li&gt;
  &lt;li&gt;List of tools mentioned in Velocity NY 2014&lt;/li&gt;
  &lt;li&gt;List of talks and slides from Velocity NY 2014&lt;/li&gt;
  &lt;li&gt;Implementing a third party script SLA&lt;/li&gt;
  &lt;li&gt;Waterfalls 101&lt;/li&gt;
  &lt;li&gt;Discovering the performance poverty line&lt;/li&gt;
  &lt;li&gt;Creating a strategy for continual performance improvements and experimentation&lt;/li&gt;
  &lt;li&gt;Why to roll your own webpagetest.org&lt;/li&gt;
  &lt;li&gt;Bucketing your users with performance data&lt;/li&gt;
  &lt;li&gt;Joining a W3C group and contributing&lt;/li&gt;
  &lt;li&gt;The W3C Beacon spec&lt;/li&gt;
  &lt;li&gt;Design and how it affects our api endpoints&lt;/li&gt;
  &lt;li&gt;Measuring performance above the fold&lt;/li&gt;
  &lt;li&gt;Review of the best image type to use&lt;/li&gt;
  &lt;li&gt;All about the browser preloader&lt;/li&gt;
  &lt;li&gt;On Experimentation&lt;/li&gt;
  &lt;li&gt;Monitoring third party scripts&lt;/li&gt;
  &lt;li&gt;A Quick and Easy way to Measure Performance: WebPageTest.org&lt;/li&gt;
  &lt;li&gt;Even the big sites have issues&lt;/li&gt;
  &lt;li&gt;Using Google BigQuery and HttpArchive to Answer Questions&lt;/li&gt;
  &lt;li&gt;Creating a strategy for SPOF and Practicing that strategy&lt;/li&gt;
  &lt;li&gt;Don’t forget the basics&lt;/li&gt;
  &lt;li&gt;Relating performance to value&lt;/li&gt;
  &lt;li&gt;The importance of page speed on user perception&lt;/li&gt;
  &lt;li&gt;Tags&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sat, 20 Sep 2014 12:22:34 -0400</pubDate>
				<link>/2014/09/20/BlogTopics.html</link>
				<guid isPermaLink="true">/2014/09/20/BlogTopics.html</guid>
			</item>
		
			<item>
				<title>Industry Leaders and Learning</title>
				<description>
</description>
				<pubDate>Wed, 17 Sep 2014 11:57:45 -0400</pubDate>
				<link>/2014/09/17/industry-leaders-and-testing.html</link>
				<guid isPermaLink="true">/2014/09/17/industry-leaders-and-testing.html</guid>
			</item>
		
			<item>
				<title>Velocity Conference New York - Day 1</title>
				<description>
</description>
				<pubDate>Tue, 16 Sep 2014 07:23:54 -0400</pubDate>
				<link>/2014/09/16/velocity-day-one.html</link>
				<guid isPermaLink="true">/2014/09/16/velocity-day-one.html</guid>
			</item>
		
			<item>
				<title>The Critical Rendering Path</title>
				<description>&lt;p&gt;Not too long ago, my development studies took me down the web performance path.  There’s a lot to cover when it comes to web site performance ranging from highly technical to just plain common sense.  In this post, I’m going to focus on what I see as a peformance fundamental once you’ve moved past the &lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot;&gt;common sense development&lt;/a&gt;.  Let’s talk about the Critical Rendering Path.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-critical-rendering-path&quot;&gt;What is the Critical Rendering Path?&lt;/h3&gt;

&lt;p&gt;Most of the time, a developer is concerned with the performance of his code either on the server or in the browser.  We’re mindful of the objects we create, the memory we consume and how quickly our code executes.  This is great stuff, but there’s another opportunity for improvement.  How quickly can the browser fetch, parse and render our website?  How long does it take for something to appear on the screen after the user clicks a link?  This is what the Critical Rendering Path is all about.&lt;/p&gt;

&lt;p&gt;To be thorough, here’s a definition directly &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/&quot;&gt;from Google&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optimizing for performance is all about understanding what happens in these intermediate steps between receiving the HTML, CSS, and JavaScript bytes and the required processing to turn them into rendered pixels - that’s the critical rendering path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;the-crp-at-30000ft&quot;&gt;The CRP at 30,000ft&lt;/h3&gt;

&lt;p&gt;The link above is great reading and tells you everything you want to know about the CRP, so I’m not going to repeat those details here.  Instead, here’s my “CRP Elevator Talk”.&lt;/p&gt;

&lt;p&gt;In order to display our website, the browser has to go through a few steps (please read Google’s info on the CRP, these steps are overly simplified)	:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the html and start to parse/create the DOM.&lt;/li&gt;
  &lt;li&gt;If there are any specified css files, download and begin to parse/create the CSSOM.&lt;/li&gt;
  &lt;li&gt;Combine the DOM and CSSOM into a Render Tree.&lt;/li&gt;
  &lt;li&gt;Execute Javascript.&lt;/li&gt;
  &lt;li&gt;Render the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-is-a-blocking-operation&quot;&gt;What is a Blocking Operation?&lt;/h3&gt;

&lt;p&gt;A blocking operation is anything that keeps the browser from being able to render the page to the screen, and in the process outlined above, we have a few render blocking operations.&lt;/p&gt;

&lt;p&gt;First, we can’t display a single thing until we’ve downloaded the html and text.  Obvious but true.&lt;/p&gt;

&lt;p&gt;Second, most browsers treat the CSS as a render blocking operation.  Have you ever seen a site that uses css but for some reason the css isn’t applied?  It’s not pretty, so most browsers will say “Oh, we have css, let’s not show anything until we’ve calculated and applied all the right styles.”&lt;/p&gt;

&lt;p&gt;Third Javascript can block in a few different ways.  The first way Javascript will block is with inline scripts.  As we know, Javascript can edit both the DOM and the CSSOM.  Consider this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;
&amp;lt;script&amp;gt;
	var span = document.getElementsByTagName(&#39;span&#39;)[0];
	span.textContent = &#39;Hi!&#39;;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will display “Hi!”” in the browser window.  What if we change it to this?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script&amp;gt;
	var span = document.getElementsByTagName(&#39;span&#39;)[0];
	span.textContent = &#39;Hi!&#39;;
&amp;lt;/script&amp;gt;
&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we see the words “Hello World”.  What happened?  Well clearly we’ve downloaded the necessary resource, the html file (the DOM is actually created incrementally).  According to the critical rendering path, the next step is to start parsing the html and begin creating the DOM.  So in the “Hello World!” case, the browser processes the html tag, then the head, then the body and then it gets to our poorly placed script tag.  The script looks for a span element in the current DOM that has been constructed so far.  Since the span element hasn’t been processed yet, the script cannot execute properly.  If you check the Chrome dev tool console, you’ll see the script tell you it can’t find it, because the script blocked the browser from parsing and creating all of the DOM.&lt;/p&gt;

&lt;p&gt;It get’s even worse when you consider the CSSOM.  Consider, if we had specified a css file in the head for our simple site.  As the browser began to parse and create the DOM, it would come upon the link tag that specified the css file and start to download the file.  As the css file was downloading the browser would continue parsing the rest of the DOM.  Maybe we also decided to change our inline script to edit the page styles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;mystyle.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;
&amp;lt;script&amp;gt;
	var span = document.getElementsByTagName(&#39;span&#39;)[0];
    span.textContent = &#39;Hi!&#39;; // changes the DOM
    span.style.color = &#39;blue&#39;;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On a good connection, everything here is fine; the “Hi!” is rendered and it’s blue.  A bad connection, however, might notice the page takes a little longer.  In order for the script to be able to edit a style, a CSSOM must exist, but if the css file is still downloading, then the CSSOM hasn’t been created.  In this case, the Javascript engine must wait for the css file to download and for the CSSOM to be created.  Only then, can it execute the blue color change.&lt;/p&gt;

&lt;p&gt;Additionally, there’s another consequence of this style block, the DOM still hasn’t been completed.  Another render block.&lt;/p&gt;

&lt;h3 id=&quot;can-i-see-the-crp-in-action&quot;&gt;Can I see the CRP in Action?&lt;/h3&gt;

&lt;p&gt;Actually, yes we can see the CRP.  The network tab in the Chrome dev tools gives us snapshot of the CRP in action.  Here’s what you do.&lt;/p&gt;

&lt;p&gt;Open Chrome, navigate to your site and open up the dev tools (Win - Ctrl + Shift + I, Mac - Cmd + Option + I).  Click the network tab and then refresh your page.  After the page is done loading, dev tools reports with some very useful info.  First of all, at the bottom of dev tools, notice the DOMContentLoaded value (in seconds).  A very brief explanation of DOMContentLoaded is that the DOM has been completely constructed and no css is blocking Javascript execution.  Side note, this is the point where most third party javascript libraries start their execution.&lt;/p&gt;

&lt;p&gt;Next, within the Network tab, scroll back up to the top and find the network request for the html file; it’s probably the first request.  Note how long it took to make the request and receive the entire file.  Now note the difference between the time it took to get the html file and the DOMContentLoaded event.  This is the time when the CRP is in action.&lt;/p&gt;

&lt;p&gt;Ideally, this time difference is small but if it’s not, there’s room for improvement.&lt;/p&gt;

&lt;h3 id=&quot;crp-applied&quot;&gt;CRP Applied&lt;/h3&gt;

&lt;p&gt;The next natural question is, “How do I optimize the CRP?”.  Well it turns out that the answer is, it depends.&lt;/p&gt;

&lt;p&gt;Our web apps are pretty unique so your site problems aren’t my site problems.  There are, however, a few things we can always check:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Number of resources required for the page to render - minimize the number of css and javascript files that are required for your page.  A lot of CRP time can be spent in network traffic.&lt;/li&gt;
  &lt;li&gt;Eliminate redirects.  Again, the network traffic matters.&lt;/li&gt;
  &lt;li&gt;Inline the above the fold css and critical js.&lt;/li&gt;
  &lt;li&gt;Make sure the javascript on your page is absolutely necessary to render the page.  If it’s not, mark the external javascript file as asynch.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These suggestions are just the tip of the iceberg; more to come.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
				<pubDate>Mon, 15 Sep 2014 00:00:00 -0400</pubDate>
				<link>/2014/09/15/critical-rendering-path.html</link>
				<guid isPermaLink="true">/2014/09/15/critical-rendering-path.html</guid>
			</item>
		
			<item>
				<title>Angular Error Pages</title>
				<description>
</description>
				<pubDate>Fri, 12 Sep 2014 15:07:46 -0400</pubDate>
				<link>/2014/09/12/angular-error-pages.html</link>
				<guid isPermaLink="true">/2014/09/12/angular-error-pages.html</guid>
			</item>
		
			<item>
				<title>Navigation Timing and the CRP</title>
				<description>&lt;p&gt;In my last post, I mentioned the DOMContentLoaded browser event.  It occurred to me that maybe not everyone is familiar with what exactly that event means or that there are more events which are useful to us.  As I started to research for this post I realized I wasn’t familiar with all the events that are available and what they mean.  So let’s learn something new.&lt;/p&gt;

&lt;h3 id=&quot;what-is-navigation-timing&quot;&gt;What is Navigation Timing?&lt;/h3&gt;

&lt;h3 id=&quot;what-is-available-to-us&quot;&gt;What is Available to Us?&lt;/h3&gt;

&lt;h3 id=&quot;how-do-i-use-it&quot;&gt;How do I Use it?&lt;/h3&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;
</description>
				<pubDate>Thu, 11 Sep 2014 19:23:50 -0400</pubDate>
				<link>/2014/09/11/navigation-timing-and-crp.html</link>
				<guid isPermaLink="true">/2014/09/11/navigation-timing-and-crp.html</guid>
			</item>
		
			<item>
				<title>The Critical Rendering Path</title>
				<description>&lt;p&gt;Not too long ago, my development studies took me down the web performance path.  There’s a lot to cover when it comes to web site performance ranging from highly technical to just plain common sense.  In this post, I’m going to focus on what I see as a peformance fundamental once you’ve moved past the &lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot;&gt;common sense development&lt;/a&gt;.  Let’s talk about the Critical Rendering Path.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-critical-rendering-path&quot;&gt;What is the Critical Rendering Path?&lt;/h3&gt;

&lt;p&gt;Most of the time, a developer is concerned with the performance of his code either on the server or in the browser.  We’re mindful of the objects we create, the memory we consume and how quickly our code executes.  This is great stuff, but there’s another opportunity for improvement.  How quickly can the browser fetch, parse and render our website?  How long does it take for something to appear on the screen after the user clicks a link?  This is what the Critical Rendering Path is all about.&lt;/p&gt;

&lt;p&gt;To be thorough, here’s a definition directly &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/&quot;&gt;from Google&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optimizing for performance is all about understanding what happens in these intermediate steps between receiving the HTML, CSS, and JavaScript bytes and the required processing to turn them into rendered pixels - that’s the critical rendering path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;the-crp-at-30000ft&quot;&gt;The CRP at 30,000ft&lt;/h3&gt;

&lt;p&gt;The link above is great reading and tells you everything you want to know about the CRP, so I’m not going to repeat those details here.  Instead, here’s my “CRP Elevator Talk”.&lt;/p&gt;

&lt;p&gt;In order to display our website, the browser has to go through a few steps (please read Google’s info on the CRP, these steps are overly simplified)	:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the html and start to parse/create the DOM.&lt;/li&gt;
  &lt;li&gt;If there are any specified css files, download and begin to parse/create the CSSOM.&lt;/li&gt;
  &lt;li&gt;Combine the DOM and CSSOM into a Render Tree.&lt;/li&gt;
  &lt;li&gt;Execute Javascript.&lt;/li&gt;
  &lt;li&gt;Render the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-is-a-blocking-operation&quot;&gt;What is a Blocking Operation?&lt;/h3&gt;

&lt;p&gt;A blocking operation is anything that keeps the browser from being able to render the page to the screen, and in the process outlined above, we have a few render blocking operations.&lt;/p&gt;

&lt;p&gt;First, we can’t display a single thing until we’ve downloaded the html and text.  Obvious but true.&lt;/p&gt;

&lt;p&gt;Second, most browsers treat the CSS as a render blocking operation.  Have you ever seen a site that uses css but for some reason the css isn’t applied?  It’s not pretty, so most browsers will say “Oh, we have css, let’s not show anything until we’ve calculated and applied all the right styles.”&lt;/p&gt;

&lt;p&gt;Third Javascript can block in a few different ways.  The first way Javascript will block is with inline scripts.  As we know, Javascript can edit both the DOM and the CSSOM.  Consider this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;
&amp;lt;script&amp;gt;
	var span = document.getElementsByTagName(&#39;span&#39;)[0];
	span.textContent = &#39;Hi!&#39;;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will display “Hi!”” in the browser window.  What if we change it to this?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script&amp;gt;
	var span = document.getElementsByTagName(&#39;span&#39;)[0];
	span.textContent = &#39;Hi!&#39;;
&amp;lt;/script&amp;gt;
&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we see the words “Hello World”.  What happened?  Well clearly we’ve downloaded the necessary resource, the html file (the DOM is actually created incrementally).  According to the critical rendering path, the next step is to start parsing the html and begin creating the DOM.  So in the “Hello World!” case, the browser processes the html tag, then the head, then the body and then it gets to our poorly placed script tag.  The script looks for a span element in the current DOM that has been constructed so far.  Since the span element hasn’t been processed yet, the script cannot execute properly.  If you check the Chrome dev tool console, you’ll see the script tell you it can’t find it, because the script blocked the browser from parsing and creating all of the DOM.&lt;/p&gt;

&lt;p&gt;It get’s even worse when you consider the CSSOM.  Consider, if we had specified a css file in the head for our simple site.  As the browser began to parse and create the DOM, it would come upon the link tag that specified the css file and start to download the file.  As the css file was downloading the browser would continue parsing the rest of the DOM.  Maybe we also decided to change our inline script to edit the page styles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;mystyle.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;
&amp;lt;script&amp;gt;
	var span = document.getElementsByTagName(&#39;span&#39;)[0];
    span.textContent = &#39;Hi!&#39;; // changes the DOM
    span.style.color = &#39;blue&#39;;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On a good connection, everything here is fine; the “Hi!” is rendered and it’s blue.  A bad connection, however, might notice the page takes a little longer.  In order for the script to be able to edit a style, a CSSOM must exist, but if the css file is still downloading, then the CSSOM hasn’t been created.  In this case, the Javascript engine must wait for the css file to download and for the CSSOM to be created.  Only then, can it execute the blue color change.&lt;/p&gt;

&lt;p&gt;Additionally, there’s another consequence of this style block, the DOM still hasn’t been completed.  Another render block.&lt;/p&gt;

&lt;h3 id=&quot;can-i-see-the-crp-in-action&quot;&gt;Can I see the CRP in Action?&lt;/h3&gt;

&lt;p&gt;Actually, yes we can see the CRP.  The network tab in the Chrome dev tools gives us snapshot of the CRP in action.  Here’s what you do.&lt;/p&gt;

&lt;p&gt;Open Chrome, navigate to your site and open up the dev tools (Win - Ctrl + Shift + I, Mac - Cmd + Option + I).  Click the network tab and then refresh your page.  After the page is done loading, dev tools reports with some very useful info.  First of all, at the bottom of dev tools, notice the DOMContentLoaded value (in seconds).  A very brief explanation of DOMContentLoaded is that the DOM has been completely constructed and no css is blocking Javascript execution.  Side note, this is the point where most third party javascript libraries start their execution.&lt;/p&gt;

&lt;p&gt;Next, within the Network tab, scroll back up to the top and find the network request for the html file; it’s probably the first request.  Note how long it took to make the request and receive the entire file.  Now note the difference between the time it took to get the html file and the DOMContentLoaded event.  This is the time when the CRP is in action.&lt;/p&gt;

&lt;p&gt;Ideally, this time difference is small but if it’s not, there’s room for improvement.&lt;/p&gt;

&lt;h3 id=&quot;crp-applied&quot;&gt;CRP Applied&lt;/h3&gt;

&lt;p&gt;The next natural question is, “How do I optimize the CRP?”.  Well it turns out that the answer is, it depends.&lt;/p&gt;

&lt;p&gt;Our web apps are pretty unique so your site problems aren’t my site problems.  There are, however, a few things we can always check:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Number of resources required for the page to render - minimize the number of css and javascript files that are required for your page.  A lot of CRP time can be spent in network traffic.&lt;/li&gt;
  &lt;li&gt;Eliminate redirects.  Again, the network traffic matters.&lt;/li&gt;
  &lt;li&gt;Inline the above the fold css and critical js.&lt;/li&gt;
  &lt;li&gt;Make sure the javascript on your page is absolutely necessary to render the page.  If it’s not, mark the external javascript file as asynch.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These suggestions are just the tip of the iceberg; more to come.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
				<pubDate>Thu, 11 Sep 2014 19:03:55 -0400</pubDate>
				<link>/2014/09/11/critical-rendering-path.html</link>
				<guid isPermaLink="true">/2014/09/11/critical-rendering-path.html</guid>
			</item>
		
			<item>
				<title>A/B Testing with Angular</title>
				<description>
</description>
				<pubDate>Mon, 08 Sep 2014 19:27:48 -0400</pubDate>
				<link>/2014/09/08/ab-test-with-angular.html</link>
				<guid isPermaLink="true">/2014/09/08/ab-test-with-angular.html</guid>
			</item>
		
			<item>
				<title>Introduction to Protractor</title>
				<description>&lt;p&gt;I’m currently working on a project wherein my team has received code from another company.  Ultimately, we’re working to replace the legacy code but in the meantime we still have to work with and support it.&lt;/p&gt;

&lt;p&gt;The project started off well enough, however, a few weeks in we discovered that our inherited code base is a beast, and it bites.  More than once, one of the programmers would be working on a feature, meet the acceptance criteria, turn in his work and then discover that his work created a new bug.  After being frustrated one too many times, we decided end to end testing was in order.  Enter Protractor.&lt;/p&gt;

&lt;h3 id=&quot;where-to-start&quot;&gt;Where to Start&lt;/h3&gt;

&lt;p&gt;For anyone that doesn’t know, Protractor is an end to end (e2e) testing solution specificly tuned to Angular applications.  It uses Selenium, and Jasmine as it’s two primary technologies and allows you to automate launching a browser, going to a specific webpage, and programmatically interacting with items on the page.  Then you can tell Protractor “Ok Protractor, after all the interaction is done, you should see item x display content y.”  It’s super handy.&lt;/p&gt;

&lt;p&gt;To get started, you really only need to go here: &lt;a href=&quot;https://github.com/angular/protractor/blob/master/docs/tutorial.md&quot;&gt;https://github.com/angular/protractor/blob/master/docs/tutorial.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tutorial is clear and straightforward and applying Protractor to your Angular application is incredibly intuitive.  We had a login/logout test running in about 5 minutes.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
				<pubDate>Mon, 08 Sep 2014 19:09:28 -0400</pubDate>
				<link>/2014/09/08/intro-to-protractor.html</link>
				<guid isPermaLink="true">/2014/09/08/intro-to-protractor.html</guid>
			</item>
		
	</channel>
</rss>
